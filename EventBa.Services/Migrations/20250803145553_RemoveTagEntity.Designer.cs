// <auto-generated />
using System;
using EventBa.Services.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventBa.Services.Migrations
{
    [DbContext(typeof(EventBaDbContext))]
    [Migration("20250803145553_RemoveTagEntity")]
    partial class RemoveTagEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventBa.Services.Database.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EventCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("event_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("categories_pkey");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("AvailableTicketsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("available_tickets_count");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("CoverImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("cover_image_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CurrentAttendees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("current_attendees");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_published");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uuid")
                        .HasColumnName("organizer_id");

                    b.Property<string>("SocialMediaLinks")
                        .HasColumnType("jsonb")
                        .HasColumnName("social_media_links");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Upcoming'::character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'Public'::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("events_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CoverImageId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.EventGalleryImage", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("EventId", "ImageId")
                        .HasName("event_gallery_images_pkey");

                    b.HasIndex("ImageId");

                    b.ToTable("event_gallery_images", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.EventReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("event_reviews_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("event_reviews", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.EventStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("AverageRating")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("average_rating");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<int>("TotalFavorites")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_favorites");

                    b.Property<decimal>("TotalRevenue")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_revenue");

                    b.Property<int>("TotalTicketsSold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_tickets_sold");

                    b.Property<int>("TotalViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_views");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("event_statistics_pkey");

                    b.HasIndex("EventId");

                    b.ToTable("event_statistics", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("file_name");

                    b.Property<int?>("FileSize")
                        .HasColumnType("integer")
                        .HasColumnName("file_size");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea")
                        .HasColumnName("image_data");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_type");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("images_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsImportant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_important");

                    b.Property<bool>("IsSystemNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_system_notification");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Sent'::character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("notifications_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency")
                        .HasDefaultValueSql("'USD'::character varying");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'Pending'::character varying");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("payments_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.RecommendedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("recommended_events_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex(new[] { "UserId", "EventId" }, "recommended_events_user_id_event_id_key")
                        .IsUnique();

                    b.ToTable("recommended_events", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "Name" }, "roles_name_key")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_available");

                    b.Property<int>("QuantitySold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity_sold");

                    b.Property<DateTime>("SaleEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sale_end_date");

                    b.Property<DateTime>("SaleStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sale_start_date");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticket_type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("tickets_pkey");

                    b.HasIndex("EventId");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.TicketPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTime?>("InvalidatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("invalidated_at");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_used");

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_valid");

                    b.Property<byte[]>("QrCodeImage")
                        .HasColumnType("bytea")
                        .HasColumnName("qr_code_image");

                    b.Property<string>("QrData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qr_data");

                    b.Property<string>("QrVerificationHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("qr_verification_hash");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticket_code");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("used_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("ticket_purchases_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TicketCode" }, "ticket_purchases_ticket_code_key")
                        .IsUnique();

                    b.ToTable("ticket_purchases", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .HasColumnName("full_name")
                        .HasComputedColumnSql("(((first_name)::text || ' '::text) || (last_name)::text)", true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_salt");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<Guid?>("ProfileImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_image_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("ProfileImageId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.UserQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Answer")
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("answered_at");

                    b.Property<DateTime>("AskedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("asked_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsAnswered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_answered");

                    b.Property<bool>("IsQuestionForAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_question_for_admin");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_questions_pkey");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("UserId");

                    b.ToTable("user_questions", (string)null);
                });

            modelBuilder.Entity("FavoriteEvent", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.HasKey("UserId", "EventId")
                        .HasName("favorite_events_pkey");

                    b.HasIndex("EventId");

                    b.ToTable("favorite_events", (string)null);
                });

            modelBuilder.Entity("UserConnection", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid")
                        .HasColumnName("follower_id");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uuid")
                        .HasColumnName("following_id");

                    b.HasKey("FollowerId", "FollowingId")
                        .HasName("user_connections_pkey");

                    b.HasIndex("FollowingId");

                    b.ToTable("user_connections", (string)null);
                });

            modelBuilder.Entity("UserInterest", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.HasKey("UserId", "CategoryId")
                        .HasName("user_interests_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("user_interests", (string)null);
                });

            modelBuilder.Entity("EventBa.Services.Database.Event", b =>
                {
                    b.HasOne("EventBa.Services.Database.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("events_category_id_fkey");

                    b.HasOne("EventBa.Services.Database.Image", "CoverImage")
                        .WithMany("Events")
                        .HasForeignKey("CoverImageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_event_cover_image");

                    b.HasOne("EventBa.Services.Database.User", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .IsRequired()
                        .HasConstraintName("events_organizer_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("CoverImage");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("EventBa.Services.Database.EventGalleryImage", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", "Event")
                        .WithMany("EventGalleryImages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_gallery_images_event_id_fkey");

                    b.HasOne("EventBa.Services.Database.Image", "Image")
                        .WithMany("EventGalleryImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_gallery_images_image_id_fkey");

                    b.Navigation("Event");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EventBa.Services.Database.EventReview", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", "Event")
                        .WithMany("EventReviews")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_reviews_event_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", "User")
                        .WithMany("EventReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("event_reviews_user_id_fkey");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventBa.Services.Database.EventStatistic", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", "Event")
                        .WithMany("EventStatistics")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_statistics_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventBa.Services.Database.Image", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("images_event_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("images_user_id_fkey");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventBa.Services.Database.Notification", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("notifications_event_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("notifications_user_id_fkey");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventBa.Services.Database.Payment", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", "Event")
                        .WithMany("Payments")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("payments_event_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("payments_user_id_fkey");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventBa.Services.Database.RecommendedEvent", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", "Event")
                        .WithMany("RecommendedEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recommended_events_event_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", "User")
                        .WithMany("RecommendedEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recommended_events_user_id_fkey");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventBa.Services.Database.Ticket", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tickets_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventBa.Services.Database.TicketPurchase", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", "Event")
                        .WithMany("TicketPurchases")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ticket_purchases_event_id_fkey");

                    b.HasOne("EventBa.Services.Database.Ticket", "Ticket")
                        .WithMany("TicketPurchases")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ticket_purchases_ticket_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", "User")
                        .WithMany("TicketPurchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ticket_purchases_user_id_fkey");

                    b.Navigation("Event");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventBa.Services.Database.User", b =>
                {
                    b.HasOne("EventBa.Services.Database.Image", "ProfileImage")
                        .WithMany("Users")
                        .HasForeignKey("ProfileImageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_profile_image");

                    b.HasOne("EventBa.Services.Database.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("users_role_id_fkey");

                    b.Navigation("ProfileImage");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EventBa.Services.Database.UserQuestion", b =>
                {
                    b.HasOne("EventBa.Services.Database.User", "Receiver")
                        .WithMany("UserQuestionReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("user_questions_receiver_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", "User")
                        .WithMany("UserQuestionUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_questions_user_id_fkey");

                    b.Navigation("Receiver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FavoriteEvent", b =>
                {
                    b.HasOne("EventBa.Services.Database.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("favorite_events_event_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("favorite_events_user_id_fkey");
                });

            modelBuilder.Entity("UserConnection", b =>
                {
                    b.HasOne("EventBa.Services.Database.User", null)
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_connections_follower_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", null)
                        .WithMany()
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_connections_following_id_fkey");
                });

            modelBuilder.Entity("UserInterest", b =>
                {
                    b.HasOne("EventBa.Services.Database.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_interests_category_id_fkey");

                    b.HasOne("EventBa.Services.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_interests_user_id_fkey");
                });

            modelBuilder.Entity("EventBa.Services.Database.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventBa.Services.Database.Event", b =>
                {
                    b.Navigation("EventGalleryImages");

                    b.Navigation("EventReviews");

                    b.Navigation("EventStatistics");

                    b.Navigation("Images");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("RecommendedEvents");

                    b.Navigation("TicketPurchases");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventBa.Services.Database.Image", b =>
                {
                    b.Navigation("EventGalleryImages");

                    b.Navigation("Events");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventBa.Services.Database.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventBa.Services.Database.Ticket", b =>
                {
                    b.Navigation("TicketPurchases");
                });

            modelBuilder.Entity("EventBa.Services.Database.User", b =>
                {
                    b.Navigation("EventReviews");

                    b.Navigation("Events");

                    b.Navigation("Images");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("RecommendedEvents");

                    b.Navigation("TicketPurchases");

                    b.Navigation("UserQuestionReceivers");

                    b.Navigation("UserQuestionUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
